name: Trunk-Based Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      level:
        description: "Version bump level (patch, minor, major)"
        required: true
        default: "patch"

permissions:
  contents: write      # for checkout & release-action
  packages: write      # for PyPI publishing

jobs:
  bump-and-publish:
    runs-on: ubuntu-latest
    if: >-
      (
        github.event_name == 'push' &&
        github.ref == 'refs/heads/main' &&
        github.actor != 'github-actions'
      ) || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install poetry

      - name: Determine bump level
        id: determine-level
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "level=${{ github.event.inputs.level }}" >> $GITHUB_OUTPUT
          else
            echo "level=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version, commit & tag
        id: bump-version
        env:
          LEVEL: ${{ steps.determine-level.outputs.level }}
        run: |
          poetry version "$LEVEL"
          NEW_VER=$(poetry version -s)
          echo "new_version=$NEW_VER" >> $GITHUB_OUTPUT

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add pyproject.toml
          git commit -m "chore: bump to v$NEW_VER"
          git tag "v$NEW_VER"
          git push origin HEAD --follow-tags

      - name: Build distribution
        run: poetry build

      - name: Install Twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload --skip-existing dist/*

      - name: Create GitHub Release & upload artifacts
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.bump-version.outputs.new_version }}
          artifacts: dist/*.tar.gz,dist/*.whl
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    needs: bump-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry & docs deps
        run: |
          pip install poetry
          poetry install --with docs

      - name: Build documentation
        run: |
          poetry run sphinx-build \
            -b html \
            -c docs/source \
            docs/source \
            docs/build/html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/html
          publish_branch: gh-pages
          user_name: 'github-actions'
          user_email: 'github-actions@github.com'
